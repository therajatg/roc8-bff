{"version":3,"sources":["../src/resolveCallSiteSourceCodeLocation.js"],"names":["readFile","fs","cachedOriginalLines","resolveOriginalPosition","mapFilePath","column","line","lineKey","originalLineResult","sourceMapResult","JSON","parse","SourceMapConsumer","with","undefined","source","originalPositionFor","callSite","Error","columnNumber","getColumnNumber","fileName","getFileName","lineNumber","getLineNumber","maybeMapFilePath","reportedNormalisedCallSite","originalPosition","path","resolve","dirname"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;AAIA;;AACA;;;;AAMA,MAAMA,QAAQ,GAAG,qBAAUC,YAAGD,QAAb,CAAjB;AAEA,MAAME,mBAA0F,GAAG,EAAnG;;AAEA,MAAMC,uBAAuB,GAAG,CAACC,WAAD,EAAsBC,MAAtB,EAAsCC,IAAtC,KAAwF;AACtH,QAAMC,OAAO,GAAI,GAAEH,WAAY,IAAGE,IAAK,IAAGD,MAAO,EAAjD,CADsH,CAGtH;;AACA,MAAIG,kBAAkB,GAAGN,mBAAmB,CAACK,OAAD,CAA5C;;AAEA,MAAI,CAACC,kBAAL,EAAyB;AACvB;AACA;AACAA,IAAAA,kBAAkB,GAAG,CAAC,YAAY;AAChC,YAAMC,eAAe,GAAGC,IAAI,CAACC,KAAL,CAAW,MAAMX,QAAQ,CAACI,WAAD,EAAc,MAAd,CAAzB,CAAxB;AAEA,aAAOQ,6BAAkBC,IAAlB,CAAuB,MAAMJ,eAA7B,EAA8CK,SAA9C,EAA0DC,MAAD,IAAY;AAC1E,eAAOA,MAAM,CAACC,mBAAP,CAA2B;AAChCX,UAAAA,MADgC;AAEhCC,UAAAA;AAFgC,SAA3B,CAAP;AAID,OALM,CAAP;AAMD,KAToB,GAArB;AAUD;;AAEDJ,EAAAA,mBAAmB,CAACK,OAAD,CAAnB,GAA+BC,kBAA/B;AAEA,SAAOA,kBAAP;AACD,CAxBD;;gDA0BsBS,Q,IAA4D;AAChF,MAAI,CAAC,qDAAuCA,QAAvC,CAAL,EAAuD;AACrD,UAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,QAAMC,YAAY,GAAGF,QAAQ,CAACG,eAAT,EAArB;AACA,QAAMC,QAAQ,GAAGJ,QAAQ,CAACK,WAAT,EAAjB;AACA,QAAMC,UAAU,GAAGN,QAAQ,CAACO,aAAT,EAAnB;;AAEA,MAAI,CAACH,QAAL,EAAe;AACb,UAAM,IAAIH,KAAJ,CAAU,mBAAV,CAAN;AACD;;AAED,QAAMO,gBAAgB,GAAGJ,QAAQ,GAAG,MAApC;AAEA,MAAIK,0BAA0B,GAAG;AAC/BP,IAAAA,YAD+B;AAE/BE,IAAAA,QAF+B;AAG/BE,IAAAA;AAH+B,GAAjC;;AAMA,MAAI,6BAAeE,gBAAf,CAAJ,EAAsC;AACpC,UAAME,gBAAgB,GAAG,MAAMxB,uBAAuB,CAACsB,gBAAD,EAAmBN,YAAnB,EAAiCI,UAAjC,CAAtD;;AAEA,QAAII,gBAAgB,CAACZ,MAArB,EAA6B;AAC3BW,MAAAA,0BAA0B,GAAG;AAC3BP,QAAAA,YAAY,EAAEQ,gBAAgB,CAACtB,MADJ;AAE3BgB,QAAAA,QAAQ,EAAEO,cAAKC,OAAL,CAAaD,cAAKE,OAAL,CAAaT,QAAb,CAAb,EAAqCM,gBAAgB,CAACZ,MAAtD,CAFiB;AAG3BQ,QAAAA,UAAU,EAAEI,gBAAgB,CAACrB;AAHF,OAA7B;AAKD;AACF;;AAED,SAAOoB,0BAAP;AACD,C","sourcesContent":["// @flow\n\nimport fs from 'fs';\nimport {promisify} from 'util';\nimport path from 'path';\nimport {\n  SourceMapConsumer,\n  NullableMappedPosition,\n} from 'source-map';\nimport isCallSiteSourceCodeLocationResolvable from './isCallSiteSourceCodeLocationResolvable';\nimport isReadableFile from './isReadableFile';\nimport type {\n  CallSiteType,\n  SourceCodeLocationType,\n} from './types';\n\nconst readFile = promisify(fs.readFile);\n\nconst cachedOriginalLines: { [string]: Promise<NullableMappedPosition> | typeof undefined, ... } = {};\n\nconst resolveOriginalPosition = (mapFilePath: string, column: number, line: number): Promise<NullableMappedPosition> => {\n  const lineKey = `${mapFilePath}-${line}-${column}`;\n\n  // if possible, attempt to resolve the original lines from cache\n  let originalLineResult = cachedOriginalLines[lineKey];\n\n  if (!originalLineResult) {\n    // Otherwise, consume the source map (hopefully from cache), and resolve the\n    // original line numbers\n    originalLineResult = (async () => {\n      const sourceMapResult = JSON.parse(await readFile(mapFilePath, 'utf8'));\n\n      return SourceMapConsumer.with(await sourceMapResult, undefined, (source) => {\n        return source.originalPositionFor({\n          column,\n          line,\n        });\n      });\n    })();\n  }\n\n  cachedOriginalLines[lineKey] = originalLineResult;\n\n  return originalLineResult;\n};\n\nexport default async (callSite: CallSiteType): Promise<SourceCodeLocationType> => {\n  if (!isCallSiteSourceCodeLocationResolvable(callSite)) {\n    throw new Error('Cannot resolve source code location.');\n  }\n\n  const columnNumber = callSite.getColumnNumber();\n  const fileName = callSite.getFileName();\n  const lineNumber = callSite.getLineNumber();\n\n  if (!fileName) {\n    throw new Error('Unexpected state.');\n  }\n\n  const maybeMapFilePath = fileName + '.map';\n\n  let reportedNormalisedCallSite = {\n    columnNumber,\n    fileName,\n    lineNumber,\n  };\n\n  if (isReadableFile(maybeMapFilePath)) {\n    const originalPosition = await resolveOriginalPosition(maybeMapFilePath, columnNumber, lineNumber);\n\n    if (originalPosition.source) {\n      reportedNormalisedCallSite = {\n        columnNumber: originalPosition.column,\n        fileName: path.resolve(path.dirname(fileName), originalPosition.source),\n        lineNumber: originalPosition.line,\n      };\n    }\n  }\n\n  return reportedNormalisedCallSite;\n};\n"],"file":"resolveCallSiteSourceCodeLocation.js"}