"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _util = require("util");

var _path = _interopRequireDefault(require("path"));

var _sourceMap = require("source-map");

var _isCallSiteSourceCodeLocationResolvable = _interopRequireDefault(require("./isCallSiteSourceCodeLocationResolvable"));

var _isReadableFile = _interopRequireDefault(require("./isReadableFile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const readFile = (0, _util.promisify)(_fs.default.readFile);
const cachedOriginalLines = {};

const resolveOriginalPosition = (mapFilePath, column, line) => {
  const lineKey = `${mapFilePath}-${line}-${column}`; // if possible, attempt to resolve the original lines from cache

  let originalLineResult = cachedOriginalLines[lineKey];

  if (!originalLineResult) {
    // Otherwise, consume the source map (hopefully from cache), and resolve the
    // original line numbers
    originalLineResult = (async () => {
      const sourceMapResult = JSON.parse(await readFile(mapFilePath, 'utf8'));
      return _sourceMap.SourceMapConsumer.with(await sourceMapResult, undefined, source => {
        return source.originalPositionFor({
          column,
          line
        });
      });
    })();
  }

  cachedOriginalLines[lineKey] = originalLineResult;
  return originalLineResult;
};

const resolveCallSiteSourceCodeLocation = async callSite => {
  if (!(0, _isCallSiteSourceCodeLocationResolvable.default)(callSite)) {
    throw new Error('Cannot resolve source code location.');
  }

  const columnNumber = callSite.getColumnNumber();
  const fileName = callSite.getFileName();
  const lineNumber = callSite.getLineNumber();

  if (!fileName) {
    throw new Error('Unexpected state.');
  }

  const maybeMapFilePath = fileName + '.map';
  let reportedNormalisedCallSite = {
    columnNumber,
    fileName,
    lineNumber
  };

  if ((0, _isReadableFile.default)(maybeMapFilePath)) {
    const originalPosition = await resolveOriginalPosition(maybeMapFilePath, columnNumber, lineNumber);

    if (originalPosition.source) {
      reportedNormalisedCallSite = {
        columnNumber: originalPosition.column,
        fileName: _path.default.resolve(_path.default.dirname(fileName), originalPosition.source),
        lineNumber: originalPosition.line
      };
    }
  }

  return reportedNormalisedCallSite;
};

var _default = resolveCallSiteSourceCodeLocation;
exports.default = _default;
//# sourceMappingURL=resolveCallSiteSourceCodeLocation.js.map