"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _bluebird = _interopRequireDefault(require("bluebird"));

var _isCallSiteSourceCodeLocationResolvable = _interopRequireDefault(require("./isCallSiteSourceCodeLocationResolvable"));

var _materializeCallSite = _interopRequireDefault(require("./materializeCallSite"));

var _resolveCallSiteSourceCodeLocation = _interopRequireDefault(require("./resolveCallSiteSourceCodeLocation"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const getStackTrace = () => {
  const oldStackTraceLimit = Error.stackTraceLimit;
  const oldPrepareStackTrace = Error.prepareStackTrace;

  Error.prepareStackTrace = (error, structuredStackTrace) => {
    return structuredStackTrace;
  };

  const honeypot = {};
  Error.captureStackTrace(honeypot);
  const callSites = honeypot.stack;
  Error.stackTraceLimit = oldStackTraceLimit;
  Error.prepareStackTrace = oldPrepareStackTrace;
  const trail = callSites.slice(1);
  return _bluebird.default.resolve(trail).map(async callSite => {
    if (!(0, _isCallSiteSourceCodeLocationResolvable.default)(callSite)) {
      return (0, _materializeCallSite.default)(callSite);
    }

    return _objectSpread(_objectSpread({}, (0, _materializeCallSite.default)(callSite)), await (0, _resolveCallSiteSourceCodeLocation.default)(callSite));
  });
};

var _default = getStackTrace;
exports.default = _default;
//# sourceMappingURL=getStackTrace.js.map